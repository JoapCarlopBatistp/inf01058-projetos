// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2024 11:19:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Trabalho_Final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Trabalho_Final_vlg_sample_tst(
	botao_passo,
	clk_in,
	rst,
	switch,
	sampler_tx
);
input  botao_passo;
input  clk_in;
input  rst;
input  switch;
output sampler_tx;

reg sample;
time current_time;
always @(botao_passo or clk_in or rst or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Trabalho_Final_vlg_check_tst (
	CLOCK,
	display,
	displayPC,
	HLT,
	saida_negativo,
	saida_zero,
	sampler_rx
);
input  CLOCK;
input [13:0] display;
input [13:0] displayPC;
input  HLT;
input  saida_negativo;
input  saida_zero;
input sampler_rx;

reg  CLOCK_expected;
reg [13:0] display_expected;
reg [13:0] displayPC_expected;
reg  HLT_expected;
reg  saida_negativo_expected;
reg  saida_zero_expected;

reg  CLOCK_prev;
reg [13:0] display_prev;
reg [13:0] displayPC_prev;
reg  HLT_prev;
reg  saida_negativo_prev;
reg  saida_zero_prev;

reg  CLOCK_expected_prev;
reg [13:0] display_expected_prev;
reg [13:0] displayPC_expected_prev;
reg  HLT_expected_prev;
reg  saida_negativo_expected_prev;
reg  saida_zero_expected_prev;

reg  last_CLOCK_exp;
reg [13:0] last_display_exp;
reg [13:0] last_displayPC_exp;
reg  last_HLT_exp;
reg  last_saida_negativo_exp;
reg  last_saida_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLOCK_prev = CLOCK;
	display_prev = display;
	displayPC_prev = displayPC;
	HLT_prev = HLT;
	saida_negativo_prev = saida_negativo;
	saida_zero_prev = saida_zero;
end

// update expected /o prevs

always @(trigger)
begin
	CLOCK_expected_prev = CLOCK_expected;
	display_expected_prev = display_expected;
	displayPC_expected_prev = displayPC_expected;
	HLT_expected_prev = HLT_expected;
	saida_negativo_expected_prev = saida_negativo_expected;
	saida_zero_expected_prev = saida_zero_expected;
end



// expected CLOCK
initial
begin
	CLOCK_expected = 1'bX;
end 
// expected display[ 13 ]
initial
begin
	display_expected[13] = 1'bX;
end 
// expected display[ 12 ]
initial
begin
	display_expected[12] = 1'bX;
end 
// expected display[ 11 ]
initial
begin
	display_expected[11] = 1'bX;
end 
// expected display[ 10 ]
initial
begin
	display_expected[10] = 1'bX;
end 
// expected display[ 9 ]
initial
begin
	display_expected[9] = 1'bX;
end 
// expected display[ 8 ]
initial
begin
	display_expected[8] = 1'bX;
end 
// expected display[ 7 ]
initial
begin
	display_expected[7] = 1'bX;
end 
// expected display[ 6 ]
initial
begin
	display_expected[6] = 1'bX;
end 
// expected display[ 5 ]
initial
begin
	display_expected[5] = 1'bX;
end 
// expected display[ 4 ]
initial
begin
	display_expected[4] = 1'bX;
end 
// expected display[ 3 ]
initial
begin
	display_expected[3] = 1'bX;
end 
// expected display[ 2 ]
initial
begin
	display_expected[2] = 1'bX;
end 
// expected display[ 1 ]
initial
begin
	display_expected[1] = 1'bX;
end 
// expected display[ 0 ]
initial
begin
	display_expected[0] = 1'bX;
end 
// expected displayPC[ 13 ]
initial
begin
	displayPC_expected[13] = 1'bX;
end 
// expected displayPC[ 12 ]
initial
begin
	displayPC_expected[12] = 1'bX;
end 
// expected displayPC[ 11 ]
initial
begin
	displayPC_expected[11] = 1'bX;
end 
// expected displayPC[ 10 ]
initial
begin
	displayPC_expected[10] = 1'bX;
end 
// expected displayPC[ 9 ]
initial
begin
	displayPC_expected[9] = 1'bX;
end 
// expected displayPC[ 8 ]
initial
begin
	displayPC_expected[8] = 1'bX;
end 
// expected displayPC[ 7 ]
initial
begin
	displayPC_expected[7] = 1'bX;
end 
// expected displayPC[ 6 ]
initial
begin
	displayPC_expected[6] = 1'bX;
end 
// expected displayPC[ 5 ]
initial
begin
	displayPC_expected[5] = 1'bX;
end 
// expected displayPC[ 4 ]
initial
begin
	displayPC_expected[4] = 1'bX;
end 
// expected displayPC[ 3 ]
initial
begin
	displayPC_expected[3] = 1'bX;
end 
// expected displayPC[ 2 ]
initial
begin
	displayPC_expected[2] = 1'bX;
end 
// expected displayPC[ 1 ]
initial
begin
	displayPC_expected[1] = 1'bX;
end 
// expected displayPC[ 0 ]
initial
begin
	displayPC_expected[0] = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected saida_negativo
initial
begin
	saida_negativo_expected = 1'bX;
end 

// expected saida_zero
initial
begin
	saida_zero_expected = 1'bX;
end 
// generate trigger
always @(CLOCK_expected or CLOCK or display_expected or display or displayPC_expected or displayPC or HLT_expected or HLT or saida_negativo_expected or saida_negativo or saida_zero_expected or saida_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLOCK = %b | expected display = %b | expected displayPC = %b | expected HLT = %b | expected saida_negativo = %b | expected saida_zero = %b | ",CLOCK_expected_prev,display_expected_prev,displayPC_expected_prev,HLT_expected_prev,saida_negativo_expected_prev,saida_zero_expected_prev);
	$display("| real CLOCK = %b | real display = %b | real displayPC = %b | real HLT = %b | real saida_negativo = %b | real saida_zero = %b | ",CLOCK_prev,display_prev,displayPC_prev,HLT_prev,saida_negativo_prev,saida_zero_prev);
`endif
	if (
		( CLOCK_expected_prev !== 1'bx ) && ( CLOCK_prev !== CLOCK_expected_prev )
		&& ((CLOCK_expected_prev !== last_CLOCK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLOCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLOCK_expected_prev);
		$display ("     Real value = %b", CLOCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLOCK_exp = CLOCK_expected_prev;
	end
	if (
		( display_expected_prev[0] !== 1'bx ) && ( display_prev[0] !== display_expected_prev[0] )
		&& ((display_expected_prev[0] !== last_display_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[0] = display_expected_prev[0];
	end
	if (
		( display_expected_prev[1] !== 1'bx ) && ( display_prev[1] !== display_expected_prev[1] )
		&& ((display_expected_prev[1] !== last_display_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[1] = display_expected_prev[1];
	end
	if (
		( display_expected_prev[2] !== 1'bx ) && ( display_prev[2] !== display_expected_prev[2] )
		&& ((display_expected_prev[2] !== last_display_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[2] = display_expected_prev[2];
	end
	if (
		( display_expected_prev[3] !== 1'bx ) && ( display_prev[3] !== display_expected_prev[3] )
		&& ((display_expected_prev[3] !== last_display_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[3] = display_expected_prev[3];
	end
	if (
		( display_expected_prev[4] !== 1'bx ) && ( display_prev[4] !== display_expected_prev[4] )
		&& ((display_expected_prev[4] !== last_display_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[4] = display_expected_prev[4];
	end
	if (
		( display_expected_prev[5] !== 1'bx ) && ( display_prev[5] !== display_expected_prev[5] )
		&& ((display_expected_prev[5] !== last_display_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[5] = display_expected_prev[5];
	end
	if (
		( display_expected_prev[6] !== 1'bx ) && ( display_prev[6] !== display_expected_prev[6] )
		&& ((display_expected_prev[6] !== last_display_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[6] = display_expected_prev[6];
	end
	if (
		( display_expected_prev[7] !== 1'bx ) && ( display_prev[7] !== display_expected_prev[7] )
		&& ((display_expected_prev[7] !== last_display_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[7] = display_expected_prev[7];
	end
	if (
		( display_expected_prev[8] !== 1'bx ) && ( display_prev[8] !== display_expected_prev[8] )
		&& ((display_expected_prev[8] !== last_display_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[8] = display_expected_prev[8];
	end
	if (
		( display_expected_prev[9] !== 1'bx ) && ( display_prev[9] !== display_expected_prev[9] )
		&& ((display_expected_prev[9] !== last_display_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[9] = display_expected_prev[9];
	end
	if (
		( display_expected_prev[10] !== 1'bx ) && ( display_prev[10] !== display_expected_prev[10] )
		&& ((display_expected_prev[10] !== last_display_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[10] = display_expected_prev[10];
	end
	if (
		( display_expected_prev[11] !== 1'bx ) && ( display_prev[11] !== display_expected_prev[11] )
		&& ((display_expected_prev[11] !== last_display_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[11] = display_expected_prev[11];
	end
	if (
		( display_expected_prev[12] !== 1'bx ) && ( display_prev[12] !== display_expected_prev[12] )
		&& ((display_expected_prev[12] !== last_display_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[12] = display_expected_prev[12];
	end
	if (
		( display_expected_prev[13] !== 1'bx ) && ( display_prev[13] !== display_expected_prev[13] )
		&& ((display_expected_prev[13] !== last_display_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[13] = display_expected_prev[13];
	end
	if (
		( displayPC_expected_prev[0] !== 1'bx ) && ( displayPC_prev[0] !== displayPC_expected_prev[0] )
		&& ((displayPC_expected_prev[0] !== last_displayPC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[0] = displayPC_expected_prev[0];
	end
	if (
		( displayPC_expected_prev[1] !== 1'bx ) && ( displayPC_prev[1] !== displayPC_expected_prev[1] )
		&& ((displayPC_expected_prev[1] !== last_displayPC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[1] = displayPC_expected_prev[1];
	end
	if (
		( displayPC_expected_prev[2] !== 1'bx ) && ( displayPC_prev[2] !== displayPC_expected_prev[2] )
		&& ((displayPC_expected_prev[2] !== last_displayPC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[2] = displayPC_expected_prev[2];
	end
	if (
		( displayPC_expected_prev[3] !== 1'bx ) && ( displayPC_prev[3] !== displayPC_expected_prev[3] )
		&& ((displayPC_expected_prev[3] !== last_displayPC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[3] = displayPC_expected_prev[3];
	end
	if (
		( displayPC_expected_prev[4] !== 1'bx ) && ( displayPC_prev[4] !== displayPC_expected_prev[4] )
		&& ((displayPC_expected_prev[4] !== last_displayPC_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[4] = displayPC_expected_prev[4];
	end
	if (
		( displayPC_expected_prev[5] !== 1'bx ) && ( displayPC_prev[5] !== displayPC_expected_prev[5] )
		&& ((displayPC_expected_prev[5] !== last_displayPC_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[5] = displayPC_expected_prev[5];
	end
	if (
		( displayPC_expected_prev[6] !== 1'bx ) && ( displayPC_prev[6] !== displayPC_expected_prev[6] )
		&& ((displayPC_expected_prev[6] !== last_displayPC_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[6] = displayPC_expected_prev[6];
	end
	if (
		( displayPC_expected_prev[7] !== 1'bx ) && ( displayPC_prev[7] !== displayPC_expected_prev[7] )
		&& ((displayPC_expected_prev[7] !== last_displayPC_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[7] = displayPC_expected_prev[7];
	end
	if (
		( displayPC_expected_prev[8] !== 1'bx ) && ( displayPC_prev[8] !== displayPC_expected_prev[8] )
		&& ((displayPC_expected_prev[8] !== last_displayPC_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[8] = displayPC_expected_prev[8];
	end
	if (
		( displayPC_expected_prev[9] !== 1'bx ) && ( displayPC_prev[9] !== displayPC_expected_prev[9] )
		&& ((displayPC_expected_prev[9] !== last_displayPC_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[9] = displayPC_expected_prev[9];
	end
	if (
		( displayPC_expected_prev[10] !== 1'bx ) && ( displayPC_prev[10] !== displayPC_expected_prev[10] )
		&& ((displayPC_expected_prev[10] !== last_displayPC_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[10] = displayPC_expected_prev[10];
	end
	if (
		( displayPC_expected_prev[11] !== 1'bx ) && ( displayPC_prev[11] !== displayPC_expected_prev[11] )
		&& ((displayPC_expected_prev[11] !== last_displayPC_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[11] = displayPC_expected_prev[11];
	end
	if (
		( displayPC_expected_prev[12] !== 1'bx ) && ( displayPC_prev[12] !== displayPC_expected_prev[12] )
		&& ((displayPC_expected_prev[12] !== last_displayPC_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[12] = displayPC_expected_prev[12];
	end
	if (
		( displayPC_expected_prev[13] !== 1'bx ) && ( displayPC_prev[13] !== displayPC_expected_prev[13] )
		&& ((displayPC_expected_prev[13] !== last_displayPC_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port displayPC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", displayPC_expected_prev);
		$display ("     Real value = %b", displayPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_displayPC_exp[13] = displayPC_expected_prev[13];
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( saida_negativo_expected_prev !== 1'bx ) && ( saida_negativo_prev !== saida_negativo_expected_prev )
		&& ((saida_negativo_expected_prev !== last_saida_negativo_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_negativo :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_negativo_expected_prev);
		$display ("     Real value = %b", saida_negativo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida_negativo_exp = saida_negativo_expected_prev;
	end
	if (
		( saida_zero_expected_prev !== 1'bx ) && ( saida_zero_prev !== saida_zero_expected_prev )
		&& ((saida_zero_expected_prev !== last_saida_zero_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_zero_expected_prev);
		$display ("     Real value = %b", saida_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida_zero_exp = saida_zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Trabalho_Final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg botao_passo;
reg clk_in;
reg rst;
reg switch;
// wires                                               
wire CLOCK;
wire [13:0] display;
wire [13:0] displayPC;
wire HLT;
wire saida_negativo;
wire saida_zero;

wire sampler;                             

// assign statements (if any)                          
Trabalho_Final i1 (
// port map - connection between master ports and signals/registers   
	.botao_passo(botao_passo),
	.clk_in(clk_in),
	.CLOCK(CLOCK),
	.display(display),
	.displayPC(displayPC),
	.HLT(HLT),
	.rst(rst),
	.saida_negativo(saida_negativo),
	.saida_zero(saida_zero),
	.switch(switch)
);

// clk_in
always
begin
	clk_in = 1'b0;
	clk_in = #25000 1'b1;
	#25000;
end 

// botao_passo
initial
begin
	botao_passo = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// switch
initial
begin
	switch = 1'b0;
end 

Trabalho_Final_vlg_sample_tst tb_sample (
	.botao_passo(botao_passo),
	.clk_in(clk_in),
	.rst(rst),
	.switch(switch),
	.sampler_tx(sampler)
);

Trabalho_Final_vlg_check_tst tb_out(
	.CLOCK(CLOCK),
	.display(display),
	.displayPC(displayPC),
	.HLT(HLT),
	.saida_negativo(saida_negativo),
	.saida_zero(saida_zero),
	.sampler_rx(sampler)
);
endmodule

